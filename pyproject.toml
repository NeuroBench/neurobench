[tool.poetry]
name = "neurobench"
version = "2.0.0"
description = "Collaborative, Fair, and Representative Benchmarks for Neuromorphic Computing"
authors = ["NeuroBench Team <neurobench@googlegroups.com>"]
readme = "README.rst"
exclude = ["docs", "tests", "examples"]

[tool.poetry.dependencies]
python = "^3.10"
numpy = ">=1.24.3"
torch = ">=2.0.1"
torchaudio = ">=2.0.2"
tqdm = "^4.63.3"
tonic = "^1.4.0"
numba = ">=0.57.1"
llvmlite = "^0.40.1"
snntorch = {version = ">=0.7.0"}
jitcdde = {version = "^1.8.1", optional = true}
pytorch-lightning = {version = "^1.4.0", optional = true}
gdown = {version = "^4.7.1", optional = true}

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.1.0"
jitcdde = "^1.8.1"
pytorch-lightning = "^1.4.0"
gdown = "^4.7.1"
librosa = "^0.10.1"
sphinx = "^7.2.5"
sphinx-rtd-theme = "^1.3.0"
pre-commit = "*"

[tool.poetry.group.code-quality]
optional = true

[tool.poetry.group.code-quality.dependencies]
pyproject-flake8 = '7.0.0'
black = '24.3.0'
docformatter = '1.7.5'
pre-commit = "3.8.0"


[tool.poetry.extras]
mackey-glass = ["jitcdde"]
nehar = ["pytorch-lightning", "gdown"]

[tool.black]
exclude = '/examples/'
line-length = 88

[tool.docformatter]
exclude = '/examples/'
recursive = true
wrap-summaries = 88
wrap-descriptions = 88
pre-summary-newline = true
blank = true
black = true

[tool.flake8]
exclude = './examples/'
count = true
statistics = true
show-source = true
max-line-length = 88
extend-ignore = ["E501", "E203", "W291", "W503", "F403", "F401", "F821"]


[tool.pytest.ini_options]
addopts = "-ra"
testpaths = [
    "tests/test_preprocessors",
    "tests/test_accumulators.py",
    "tests/test_benchmarks.py",
    "tests/test_frameworks.py",
    "tests/test_metrics.py",
]

[tool.coverage.run]
branch = true
include = [
    "neurobench/*",
]
omit = [
    "examples/*",
    "neurobench/datasets/*",
    "neurobench/tests/*",
]

[tool.coverage.report]

exclude_also = [
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true
format = 'markdown'

[tool.coverage.xml]
output = "coverage/reports/coverage.xml"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
